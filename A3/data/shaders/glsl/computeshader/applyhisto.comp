/* Start Header *****************************************************************/ 

/*! \file applyhisto.comp \author Wong Wei Hao, w.weihao, 390007020

  \par w.weihao@digipen.edu

  \date Nov 11, 2022

  \brief Copyright (C) 2022 DigiPen Institute of Technology. 

  Reproduction or disclosure of this file or its contents without the prior written consent of DigiPen Institute of Technology is prohibited. */ 

/* End Header *******************************************************************/ 

#version 450

#define HISTOGRAM256BINCOUNT 256

float CORRECT_COLOR(float cdfVal, float cdfMin)
{
  return clamp((cdfVal - cdfMin) / (1.0 - cdfMin), 0.0, 1.0);
}

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

struct bufferHistoeq
{
	uint histoBin[256];
	float cdf[256];
};

const mat3 YUV = mat3    
(
   0.299, -0.169,  0.499,
   0.587, -0.331, -0.418,
   0.114,  0.499, -0.0813
);

const mat3 RGB = mat3
(
  1.0,    1.0,   1.0,
  0.0,   -0.344, 1.772,
  1.402, -0.714, 0.0
);

//shd be set 0 , binding 2
layout (binding = 2) buffer StorageBuffer
{
	bufferHistoeq buf;
} storageBuffer;

shared float sCDFMemory [HISTOGRAM256BINCOUNT]; // declare shared memory

void main()
{


	ivec2 xy_int = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imgSize = imageSize(inputImage); // gets the image2d size

	//load to shared memory
	if(xy_int.x < imgSize.x && xy_int.y < imgSize.y )
	{
		sCDFMemory[gl_LocalInvocationIndex] = storageBuffer.buf.cdf[gl_LocalInvocationIndex];
	}
	// memoryBarrierShared();
	barrier();

	float cdfMinY = sCDFMemory[0]; // min cdf value

	vec3 pixel_color = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy)).rgb;
	vec3 yuv = YUV * pixel_color; // calculating YUV 
  	yuv.x = CORRECT_COLOR(sCDFMemory[int(yuv.x * 255.0)], cdfMinY);

  	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(clamp(RGB * yuv, 0.0, 1.0), 1.0));

	// // without shared memory
	// float cdfMinY = storageBuffer.buf.cdf[0]; // min cdf value
	// vec3 pixel_color = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy)).rgb;
	// vec3 yuv = YUV * pixel_color; // calculating YUV 
  	// yuv.x = CORRECT_COLOR(storageBuffer.buf.cdf[int(yuv.x * 255.0)], cdfMinY);
  	// imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(clamp(RGB * yuv, 0.0, 1.0), 1.0));
	

}