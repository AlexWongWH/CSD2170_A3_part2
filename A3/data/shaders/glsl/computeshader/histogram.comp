/* Start Header *****************************************************************/ 

/*! \file histogram.comp \author Wong Wei Hao, w.weihao, 390007020

  \par w.weihao@digipen.edu

  \date Nov 11, 2022

  \brief Copyright (C) 2022 DigiPen Institute of Technology. 

  Reproduction or disclosure of this file or its contents without the prior written consent of DigiPen Institute of Technology is prohibited. */ 

/* End Header *******************************************************************/ 

#version 450

#define HISTOGRAM256BINCOUNT 256

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;


struct bufferHistoeq
{
	uint histoBin[256];
	float cdf[256];
};

//shd be set 0 , binding 2
layout (binding = 2) buffer StorageBuffer
{
	bufferHistoeq buf;
} storageBuffer;

//convert the input of RGB model into YUV model 

shared uint sMemory [HISTOGRAM256BINCOUNT]; // declare shared memory


void main()
{	

	////reset buf storage to 0
	// ivec2 imgSize = imageSize(inputImage); // gets the image2d size
	// int i = (xy_int.y * imageSize(inputImage).x) + xy_int.x; 	// calculate the index
	// storageBuffer.buf.histoBin[i] = 0;
	// storageBuffer.buf.cdf[i] = 0.f;

	sMemory[gl_LocalInvocationIndex] = 0;
	
	//might have to find better method
	// Pixel color form the image
	vec4 pixel_color = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.xy));
	/*genType clamp( genType x, genType minVal, genType maxVal); */
	
	//clamp thrown in to one line
	float y = clamp( (0.299f * pixel_color.r) + (0.587f * pixel_color.g) + (0.114f * pixel_color.b), 0 , 1 );
	// float y = 255.f * dot(pixel_color.rgb, vec3(0.299f,0.587f, 0.114f ));
	// float u = clamp( ((-0.169f * pixel_color.r) + (-0.331f * pixel_color.g) + (0.499f * pixel_color.b)) + 0.5f , 0 , 1 );
	// float v = clamp( ((0.499f * pixel_color.r) + (-0.418f * pixel_color.g) + (-0.0813f * pixel_color.b)) + 0.5f, 0 , 1 );
	
	memoryBarrierShared();

    ivec2 imgSize = imageSize(inputImage); // gets the image2d size
	ivec2 imgLoc = ivec2(gl_GlobalInvocationID.xy);
	if(imgLoc.x < imgSize.x && imgLoc.y < imgSize.y )
	{
		// uint index = uint(y*255);
		atomicAdd(sMemory[uint(y*255.f)] ,1); // shared mem
		// atomicAdd(sMemory[clamp(uint(y),0,1)] ,1); // shared mem
	}

	barrier();
	// histogram on Y component histo[dataYUV[i]]++; // Histogram for Y
	atomicAdd(storageBuffer.buf.histoBin[gl_LocalInvocationIndex],sMemory[gl_LocalInvocationIndex]);


	// 	atomicAdd(storageBuffer.buf.histoBin[uint(r*255)],1); // this line might be wrong
	// i = (row * width) + col // should not need this


	// // atomicAdd(storageBuffer.buf.histoBin[uint(y*255)],1); // shd be correct (checked)
	// uint index = uint(y*255);
	// atomicAdd(sMemory[index] ,1); // shared mem

	// storageBuffer.buf.histoBin[i] = sMemory[i]; // atomic add back to the storage buffer
	// atomicAdd(storageBuffer.buf.histoBin[index],sMemory[index]);

	//use shared memory to histo gram bim

}